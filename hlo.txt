High level overview

Searching for a string in a file is a long-standing problem in computer science,
and various data structures and algorithms have been devised for such a problem
(particularly for dealing with long files). This relates closely to a common
problem in bioinformatics, the alignment of short reads to reference genomes.

One of the first data structures developed for the string search problem
(as well as many other string operations) is the suffix tree. It allows exact
string search in O(m) time complexity (where m is the length of the string),
although it requires O(n) time to build the tree. Other problems are prohibitive
memory usage (the suffix tree for the human genome (~3.4e9 nucleotides) would
be about 68GB) and poor cache locality. The suffix array requires about 1/5
of the memory of a suffix tree and can also be constructed in linear time; it
requires auxiliary data (for example, an LCP array) to perform some string
operations and is harder to update if the corpus (i.e. the indexed string)
changes; neither of these limitations matters for sequence alignment.

However, the suffix array does not suffice to provide O(m) exact search (the
LCP array allows us to do so, but would bring the memory requirement back up to
~40% that of the suffix tree). However, using the Burrows-Wheeler transform, we
can accomplish this in less memory than is required to store the suffix array.

The first step towards sequence alignment is building a suffix array (i.e.
sorted list of suffixes) from the genome. There are many algorithms to do this;
the algorithm used here is Ge Nong's SACA-K, which has a fairly simple
implementation and optimal asymptotic time (linear) and space (constant) usage.

The suffix array is then used to build a FM-index. The FM-index consists of the
Burrows-Wheeler transformed string (constructed trivially as bwt[i] = 
seq[SA[i]-1] for SA[i] != 0) with auxiliary data to calculate rank in constant
time. This is implemented by storing a fraction of the suffix array, a fraction
of the rank, and the total counts of each nucleotide in the sequence.
(in actual implementation the sentinel character is not stored; this is
irrelevant for interacting with the FM-index via any of the interfaces)

An FM-index allows for the implementation of exact search in O(n + log_c m),
where c is chosen at the time of construction of the index (it is possible
to choose m, but this dramatically increases memory usage, because it requires
that we store the entire suffix array).

Functions of interest:

Most functions regarding the FM-index are in seqindex.c. Here we cover the
most relevant functions to interact with the FM-index.

make_fmi() makes the FMI from a string which is expected to be in packed form
(see build_index.c for a way of turning a normal sequence into that form).

reverse_search() searches for an exact pattern over the index and returns the
number of matches. It does so in time linear in the length of the pattern
(asymptotically; in reality it's affected by things like caching so it
is not exactly constant in the genome size)

unc_sa() returns the rotation corresponding to a location on the Burrows-Wheeler
transform. It is used to change the returned locations of locate(), mms() and
similar functions into locations on the string. (As the name indicates, it
"uncompresses" the suffix array and returns SA[idx])

locate() returns the first (lexicographical) rotation with the given pattern
as a prefix, or -1 if no such rotation exists. It also prints a warning if
multiple such rotations exist. It has runtime equivalent to calling
reverse_search() plus unc_sa() (the latter only if there was a match).

loc_search() behaves like locate(), but instead stores the range of rotations
in the BWT with the pattern as prefix in the given pointers sp and ep (so that
unc_sa(fmi, *sp), unc_sa(fmi, sp[1]), ..., unc_sa(fmi, ep[-1]) are the locations
on the gneome)

mms() finds what I term the "maximum mappable suffix" of the pattern; it
essentially does locate() until it fails, then returns the range of matches in
sp and ep, and returns the number of bases matched.

destroy_fmi frees all the memory associated with a given FM-index.

fileio.c contains the functions used to write and read an index to and from disk


